


ARM Macro Assembler    Page 1 


    1 00000000         ; ThreadStack.s contains assembly functions for manipula
                       ting the 
    2 00000000         ; thread stack
    3 00000000         ;
    4 00000000         ; Written by: Katy Loeffler 2/7/2011
    5 00000000         ;*******************************************************
                       **********************
    6 00000000         
    7 00000000                 THUMB
    8 00000000                 REQUIRE8
    9 00000000                 PRESERVE8
   10 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   11 00000000         
   12 00000000                 EXPORT           PushRegs4to11
   13 00000000                 EXPORT           PullRegs4to11
   14 00000000                 EXPORT           SetStackPointer
   15 00000000         
   16 00000000        0 
                       StkPtr  RN               R0          ; 1st function inpu
                                                            t: Stack Pointer
   17 00000000         
   18 00000000         ;*******************************************************
                       ***********************
   19 00000000         ; PushRegs4to11
   20 00000000         ;
   21 00000000         ; Pushes registers 4 through 11 for thread switching pur
                       poses
   22 00000000         ; \param R0 holds the stack pointer
   23 00000000         ; \return the new position of the stack pointer
   24 00000000         ;*******************************************************
                       ***********************
   25 00000000         PushRegs4to11
   26 00000000 E92D 0FB0       PUSH             {R4, R5, R7, R8, R9, R10, R11} 
                                                            ; save registers
   27 00000004 F3EF 8009       MRS              R0, PSP     ; move PSP into res
                                                            ult register R0
   28 00000008 4770            BX               LR
   29 0000000A         
   30 0000000A         ;*******************************************************
                       ***********************
   31 0000000A         ; PullRegs4to11
   32 0000000A         ;
   33 0000000A         ; Pulls registers 4 through 11 for thread switching purp
                       oses
   34 0000000A         ; \param R0 holds the stack pointer
   35 0000000A         ; \return the new position of the stack pointer
   36 0000000A         ;*******************************************************
                       ***********************
   37 0000000A         PullRegs4to11
   38 0000000A E8BD 0FB0       POP              {R4, R5, R7, R8, R9, R10, R11} 
                                                            ; save registers
   39 0000000E F3EF 8009       MRS              R0, PSP     ; move PSP into res
                                                            ult register R0
   40 00000012 4770            BX               LR
   41 00000014         
   42 00000014         ;*******************************************************
                       ***********************
   43 00000014         ; SetStackPointer



ARM Macro Assembler    Page 2 


   44 00000014         ;
   45 00000014         ; Loads the stack pointer with the indicated value
   46 00000014         ; \param R0 holds the new stack pointer value
   47 00000014         ; \return none
   48 00000014         ;*******************************************************
                       ***********************
   49 00000014         SetStackPointer
   50 00000014 F380 8809       MSR              PSP, R0     ; set PSP to value 
                                                            in R0 
   51 00000018 4770            BX               LR
   52 0000001A         
   53 0000001A         ;*******************************************************
                       ***********************
   54 0000001A         ;
   55 0000001A         ; Make sure the end of this section is aligned.
   56 0000001A         ;
   57 0000001A         ;*******************************************************
                       ***********************
   58 0000001A 00 00           ALIGN
   59 0000001C         
   60 0000001C         ;*******************************************************
                       ***********************
   61 0000001C         ;
   62 0000001C         ; Tell the assembler that we're done.
   63 0000001C         ;
   64 0000001C         ;*******************************************************
                       ***********************
   65 0000001C                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=ThreadSt
ack.d -oThreadStack.o -I.. -I..\..\.. -I"C:\Program Files\Keil\ARM\INC" -I"C:\P
rogram Files\Keil\ARM\INC\Luminary" --predefine="__EVAL SETA 1" --list=.\Thread
Stack.lst ..\drivers\ThreadStack.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 10 in file ..\drivers\ThreadStack.s
   Uses
      None
Comment: .text unused
PullRegs4to11 0000000A

Symbol: PullRegs4to11
   Definitions
      At line 37 in file ..\drivers\ThreadStack.s
   Uses
      At line 13 in file ..\drivers\ThreadStack.s
Comment: PullRegs4to11 used once
PushRegs4to11 00000000

Symbol: PushRegs4to11
   Definitions
      At line 25 in file ..\drivers\ThreadStack.s
   Uses
      At line 12 in file ..\drivers\ThreadStack.s
Comment: PushRegs4to11 used once
SetStackPointer 00000014

Symbol: SetStackPointer
   Definitions
      At line 49 in file ..\drivers\ThreadStack.s
   Uses
      At line 14 in file ..\drivers\ThreadStack.s
Comment: SetStackPointer used once
4 symbols
329 symbols in table
